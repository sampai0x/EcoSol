import api from "./api"

// Cache para evitar m√∫ltiplas requisi√ß√µes simult√¢neas
let currentUserCache = null
let currentUserPromise = null

export const authService = {
  async loginCliente(email, senha) {
    // Endpoint correto do Swagger: POST /api/auth/login/cliente
    const response = await api.post("/api/auth/login/cliente", { email, senha })
    // Limpar cache ap√≥s login
    currentUserCache = null
    currentUserPromise = null
    return response.data
  },

  async loginFornecedor(email, senha) {
    // Endpoint correto do Swagger: POST /api/auth/login/fornecedor
    const response = await api.post("/api/auth/login/fornecedor", { email, senha })
    // Limpar cache ap√≥s login
    currentUserCache = null
    currentUserPromise = null
    return response.data
  },

  async loginAdmin(email, senha) {
    // Endpoint correto do Swagger: POST /api/auth/login/admin
    const response = await api.post("/api/auth/login/admin", { email, senha })
    // Limpar cache ap√≥s login
    currentUserCache = null
    currentUserPromise = null
    return response.data
  },

  // Login sem salvar no localStorage - apenas retorna os dados
  async login(email, senha) {
    console.log("Tentando login para:", email)

    // Tenta todos os tipos de login em sequ√™ncia
    try {
      console.log("Tentando login como cliente...")
      const response = await this.loginCliente(email, senha)
      console.log("Login como cliente bem-sucedido:", response)
      const user = { ...response, tipo: "Cliente" }
      // Cachear o usu√°rio ap√≥s login bem-sucedido
      currentUserCache = user
      return user
    } catch (error) {
      console.log("Login como cliente falhou:", error.message)

      try {
        console.log("Tentando login como fornecedor...")
        const response = await this.loginFornecedor(email, senha)
        console.log("Login como fornecedor bem-sucedido:", response)
        const user = { ...response, tipo: "Fornecedor" }
        // Cachear o usu√°rio ap√≥s login bem-sucedido
        currentUserCache = user
        return user
      } catch (error) {
        console.log("Login como fornecedor falhou:", error.message)

        try {
          console.log("Tentando login como admin...")
          const response = await this.loginAdmin(email, senha)
          console.log("Login como admin bem-sucedido:", response)
          const user = { ...response, tipo: "Empresa" }
          // Cachear o usu√°rio ap√≥s login bem-sucedido
          currentUserCache = user
          return user
        } catch (error) {
          console.log("Login como admin falhou:", error.message)
          throw new Error("Credenciais inv√°lidas")
        }
      }
    }
  },

  // Logout apenas no backend
  async logout() {
    console.log("Fazendo logout...")

    try {
      // Endpoint correto do Swagger: POST /api/auth/logout
      const response = await api.post("/api/auth/logout")
      console.log("Logout no backend bem-sucedido")
      // Limpar cache ap√≥s logout
      currentUserCache = null
      currentUserPromise = null
      return response.data
    } catch (error) {
      console.warn("Erro no logout do backend:", error.message)
      // Limpar cache mesmo com erro
      currentUserCache = null
      currentUserPromise = null
      // Relan√ßa o erro para que o componente saiba que houve problema
      throw error
    }
  },

  // Verifica autentica√ß√£o sempre pelo backend com cache
  async getCurrentUser() {
    console.log("üîç Verificando usu√°rio atual no backend...")

    // Se j√° temos um cache v√°lido, retorna imediatamente
    if (currentUserCache) {
      console.log("‚úÖ Retornando usu√°rio do cache:", currentUserCache)
      return currentUserCache
    }

    // Se j√° h√° uma requisi√ß√£o em andamento, aguarda ela
    if (currentUserPromise) {
      console.log("‚è≥ Aguardando requisi√ß√£o em andamento...")
      return await currentUserPromise
    }

    // Cria uma nova promise para evitar m√∫ltiplas requisi√ß√µes
    currentUserPromise = this._fetchCurrentUser()

    try {
      const user = await currentUserPromise
      currentUserCache = user // Cachear o resultado
      return user
    } catch (error) {
      currentUserCache = null
      throw error
    } finally {
      currentUserPromise = null
    }
  },

  async _fetchCurrentUser() {
    try {
      // Tenta verificar como cliente primeiro
      try {
        const response = await api.get("/api/Clientes/me")
        console.log("‚úÖ Usu√°rio √© cliente:", response.data)
        return { ...response.data, tipo: "Cliente" }
      } catch (clienteError) {
        console.log("N√£o √© cliente:", clienteError.response?.status)
      }

      // Tenta verificar como fornecedor
      try {
        const response = await api.get("/api/Fornecedores/me")
        console.log("‚úÖ Usu√°rio √© fornecedor:", response.data)
        return { ...response.data, tipo: "Fornecedor" }
      } catch (fornecedorError) {
        console.log("N√£o √© fornecedor:", fornecedorError.response?.status)
      }

      // Tenta verificar como admin/empresa
      try {
        const response = await api.get("/api/Dashboard/dashboard/empresa/stats")
        console.log("‚úÖ Usu√°rio √© admin/empresa")
        // Para admin, retornamos dados b√°sicos j√° que n√£o temos endpoint espec√≠fico
        return {
          nome: "Administrador",
          email: "admin@ecosol.com",
          tipo: "Empresa",
        }
      } catch (adminError) {
        console.log("N√£o √© admin:", adminError.response?.status)
      }

      // Se chegou at√© aqui, n√£o est√° autenticado
      console.log("‚ùå Usu√°rio n√£o autenticado")
      return null
    } catch (error) {
      console.error("‚ùå Erro na verifica√ß√£o de autentica√ß√£o:", error)
      return null
    }
  },

  // M√©todo para verificar se est√° logado (mais leve)
  async isAuthenticated() {
    try {
      const user = await this.getCurrentUser()
      return !!user
    } catch (error) {
      return false
    }
  },

  // M√©todo para limpar cache (√∫til para for√ßar nova verifica√ß√£o)
  clearCache() {
    currentUserCache = null
    currentUserPromise = null
  },
}
