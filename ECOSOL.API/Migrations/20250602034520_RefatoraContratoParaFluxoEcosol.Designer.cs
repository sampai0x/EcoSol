// <auto-generated />
using System;
using ECOSOL.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ECOSOL.API.Migrations
{
    [DbContext(typeof(EcosolDbContext))]
    [Migration("20250602034520_RefatoraContratoParaFluxoEcosol")]
    partial class RefatoraContratoParaFluxoEcosol
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ECOSOL.API.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("ECOSOL.API.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ComprovanteUrl")
                        .HasColumnType("text");

                    b.Property<string>("CpfCnpj")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DataAprovacaoComprovante")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEnvioComprovante")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EcoSolId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EnderecoCompleto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ObservacaoRejeicao")
                        .HasColumnType("text");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StatusAprovacao")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EcoSolId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("ECOSOL.API.Entities.Contrato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataContrato")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EcoSolId")
                        .HasColumnType("integer");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("integer");

                    b.Property<decimal>("QuantidadeEnergia")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ValorContrato")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("EcoSolId");

                    b.HasIndex("FornecedorId");

                    b.ToTable("Contratos");
                });

            modelBuilder.Entity("ECOSOL.API.Entities.EcoSol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BancoEnergia")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("EcoSols");
                });

            modelBuilder.Entity("ECOSOL.API.Entities.Fornecedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CpfCnpj")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EcoSolId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EcoSolId");

                    b.ToTable("Fornecedores");
                });

            modelBuilder.Entity("ECOSOL.API.Entities.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataContrato")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EcoSolId")
                        .HasColumnType("integer");

                    b.Property<string>("EnderecoEntrega")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("QuantidadeEnergia")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ValorContrato")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EcoSolId");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("ECOSOL.API.Entities.Cliente", b =>
                {
                    b.HasOne("ECOSOL.API.Entities.EcoSol", "EcoSol")
                        .WithMany("Clientes")
                        .HasForeignKey("EcoSolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EcoSol");
                });

            modelBuilder.Entity("ECOSOL.API.Entities.Contrato", b =>
                {
                    b.HasOne("ECOSOL.API.Entities.EcoSol", "EcoSol")
                        .WithMany("Contratos")
                        .HasForeignKey("EcoSolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECOSOL.API.Entities.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EcoSol");

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("ECOSOL.API.Entities.Fornecedor", b =>
                {
                    b.HasOne("ECOSOL.API.Entities.EcoSol", "EcoSol")
                        .WithMany("Fornecedores")
                        .HasForeignKey("EcoSolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EcoSol");
                });

            modelBuilder.Entity("ECOSOL.API.Entities.Pedido", b =>
                {
                    b.HasOne("ECOSOL.API.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECOSOL.API.Entities.EcoSol", "EcoSol")
                        .WithMany("Pedidos")
                        .HasForeignKey("EcoSolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("EcoSol");
                });

            modelBuilder.Entity("ECOSOL.API.Entities.EcoSol", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Contratos");

                    b.Navigation("Fornecedores");

                    b.Navigation("Pedidos");
                });
#pragma warning restore 612, 618
        }
    }
}
